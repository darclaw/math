
==================== FINAL INTERFACE ====================
2017-06-01 00:21:11.520820221 UTC

interface main@main:AI.Tree 8002
  interface hash: a82fa56bef49b4562dfd5608195e3a52
  ABI hash: 2e7b9408597e553c71ef36c06ed27283
  export-list hash: 1f22d7c5525bfe5f85d5f0a0c9460b69
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ec690718e88d13d1d9806d316bc0e878
  sig of: Nothing
  used TH splices: False
  where
exports:
  AI.Tree.+++
  AI.Tree.-:
  AI.Tree.genTree
  AI.Tree.sgenTree
  AI.Tree.Tree{AI.Tree.Leaf AI.Tree.Node}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random 586320b03bf566a35255443e8bc5acf7
8eb29c8127a20373fa66e63d08dcf44d
  $fReadTree ::
    (GHC.Read.Read b, GHC.Read.Read a) =>
    GHC.Read.Read (AI.Tree.Tree a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U(A,A,U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dRead :: GHC.Read.Read b)
                      ($dRead1 :: GHC.Read.Read a).
                  @ (AI.Tree.Tree a b)
                  (AI.Tree.$fReadTree_$creadsPrec @ a @ b $dRead $dRead1)
                  (AI.Tree.$fReadTree_$creadList @ a @ b $dRead $dRead1)
                  (AI.Tree.$fReadTree_$creadPrec @ a @ b $dRead $dRead1)
                  (AI.Tree.$fReadTree_$creadListPrec @ a @ b $dRead $dRead1) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fReadTree1 ::
    (GHC.Read.Read b, GHC.Read.Read a) =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       ([AI.Tree.Tree a b] -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 4, Strictness: <L,U(A,A,U,A)><L,U(A,A,U,A)><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dRead :: GHC.Read.Read b)
                   ($dRead1 :: GHC.Read.Read a)
                   (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (eta1 :: [AI.Tree.Tree a b]
                            -> Text.ParserCombinators.ReadP.P b1) ->
                 GHC.Read.list1
                   @ (AI.Tree.Tree a b)
                   (AI.Tree.$fReadTree2 @ a @ b $dRead $dRead1)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <AI.Tree.Tree a b>_R))
                   eta
                   @ b1
                   eta1) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fReadTree2 ::
    (GHC.Read.Read b, GHC.Read.Read a) =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (AI.Tree.Tree a b)
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,U(A,A,U,A)><L,U> -}
8eb29c8127a20373fa66e63d08dcf44d
  $fReadTree_$creadList ::
    (GHC.Read.Read b, GHC.Read.Read a) =>
    Text.ParserCombinators.ReadP.ReadS [AI.Tree.Tree a b]
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U(A,A,U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ($dRead :: GHC.Read.Read b)
                   ($dRead1 :: GHC.Read.Read a) ->
                 Text.ParserCombinators.ReadP.run
                   @ [AI.Tree.Tree a b]
                   (GHC.Read.list1
                      @ (AI.Tree.Tree a b)
                      (AI.Tree.$fReadTree2 @ a @ b $dRead $dRead1)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <AI.Tree.Tree a b>_R))
                      GHC.Read.$fRead()5
                      @ [AI.Tree.Tree a b]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [AI.Tree.Tree a b]))) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fReadTree_$creadListPrec ::
    (GHC.Read.Read b, GHC.Read.Read a) =>
    Text.ParserCombinators.ReadPrec.ReadPrec [AI.Tree.Tree a b]
  {- Arity: 4, Strictness: <L,U(A,A,U,A)><L,U(A,A,U,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                AI.Tree.$fReadTree1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Read.Read b>_R
                 ->_R <GHC.Read.Read a>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <[AI.Tree.Tree a b]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                    <[AI.Tree.Tree a b]>_R))) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fReadTree_$creadPrec ::
    (GHC.Read.Read b, GHC.Read.Read a) =>
    Text.ParserCombinators.ReadPrec.ReadPrec (AI.Tree.Tree a b)
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                AI.Tree.$fReadTree2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Read.Read b>_R
                 ->_R <GHC.Read.Read a>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <AI.Tree.Tree a b>_R)) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fReadTree_$creadsPrec ::
    (GHC.Read.Read b, GHC.Read.Read a) =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (AI.Tree.Tree a b)
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dRead :: GHC.Read.Read b)
                   ($dRead1 :: GHC.Read.Read a)
                   (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (AI.Tree.Tree a b)
                   ((AI.Tree.$fReadTree2 @ a @ b $dRead $dRead1 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <AI.Tree.Tree a b>_R)
                      @ (AI.Tree.Tree a b)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (AI.Tree.Tree a b)))) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fShowTree ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (AI.Tree.Tree a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (AI.Tree.Tree a b)
                  (AI.Tree.$fShowTree_$cshowsPrec @ a @ b $dShow $dShow1)
                  (AI.Tree.$fShowTree_$cshow @ a @ b $dShow $dShow1)
                  (AI.Tree.$fShowTree_$cshowList @ a @ b $dShow $dShow1) -}
a4432e9f002f2018353878dc213a79ac
  $fShowTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fShowTree_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    AI.Tree.Tree a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: AI.Tree.Tree a b) ->
                 AI.Tree.$fShowTree_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fShowTree_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [AI.Tree.Tree a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [AI.Tree.Tree a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (AI.Tree.Tree a b)
                   (AI.Tree.$fShowTree_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      AI.Tree.$fShowTree1)
                   eta
                   eta1) -}
8eb29c8127a20373fa66e63d08dcf44d
  $fShowTree_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> AI.Tree.Tree a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: AI.Tree.Tree a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 AI.Tree.$w$cshowsPrec @ a @ b w w1 ww1 w3 }) -}
e1c4bfbf87bcc6c2c208d39d05913733
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18336872983388887194##
                   12384595732763836382##
                   AI.Tree.$trModule
                   AI.Tree.$tc'Leaf1) -}
c0e3dd5cbbdcc10b18b721587908faca
  $tc'Leaf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Leaf"#) -}
0570ae2ddda64d9da71af794ebdba2a7
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13821317223262625012##
                   15631325983168519075##
                   AI.Tree.$trModule
                   AI.Tree.$tc'Node1) -}
51c9bd2d895c33a61b76d68477bde20a
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
65feb9f99ff2ccdf35f3f9979e158238
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3128110496918336675##
                   9076666823820803897##
                   AI.Tree.$trModule
                   AI.Tree.$tcTree1) -}
a73ab3741c893fdb308270ce06642ea7
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tree"#) -}
ef00c500c6592779a98bbb0385790c39
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AI.Tree.$trModule2
                   AI.Tree.$trModule1) -}
16f3e342c751471e0c3a8c07bf91366c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AI.Tree"#) -}
28747754f0fff31b04976a653f2fcd4b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8eb29c8127a20373fa66e63d08dcf44d
  $w$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> AI.Tree.Tree a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0] -}
1efdaeb0960888b5537793482e75263b
  (+++) ::
    (GHC.Classes.Ord a, GHC.Classes.Ord t, GHC.Num.Num a) =>
    [(t, a)] -> [(t, a)] -> [(t, a)]
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(1*U,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),A,A,A,A,A,A)><S,1*U><L,1*U>,
     Unfolding: (\ @ a
                   @ t
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord t)
                   ($dNum :: GHC.Num.Num a)
                   (eta :: [(t, a)])
                   (eta1 :: [(t, a)]) ->
                 let {
                   $dEq :: GHC.Classes.Eq t = GHC.Classes.$p1Ord @ t $dOrd1
                 } in
                 GHC.Base.map
                   @ [(t, a)]
                   @ (t, a)
                   (\ (a1 :: [(t, a)]) ->
                    case a1 of wild {
                      [] -> case GHC.List.scanl2 ret_ty (t, a) of {}
                      : ds1 xs
                      -> case ds1 of ww { (,) ww1 ww2 ->
                         letrec {
                           $wgo :: [(t, a)] -> t -> a -> (# t, a #)
                             {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
                           = \ (w :: [(t, a)]) (ww3 :: t) (ww4 :: a) ->
                             case w of wild1 {
                               [] -> (# ww3, ww4 #)
                               : y ys
                               -> case y of wild2 { (,) ds m ->
                                  $wgo ys ww3 (GHC.Num.+ @ a $dNum ww4 m) } }
                         } in
                         case $wgo xs ww1 ww2 of ww3 { (#,#) ww4 ww5 -> (ww4, ww5) } } })
                   (Data.OldList.groupBy
                      @ (t, a)
                      (\ (ds :: (t, a)) (ds1 :: (t, a)) ->
                       case ds of wild { (,) a1 ds2 ->
                       case ds1 of wild1 { (,) c ds3 -> GHC.Classes.== @ t $dEq a1 c } })
                      (Data.OldList.sortBy
                         @ (t, a)
                         (GHC.Classes.$fOrd(,)_$ccompare @ t @ a $dOrd1 $dOrd)
                         (GHC.Base.++ @ (t, a) eta eta1)))) -}
60cf23eece2af3f2dbc34829d5fe0583
  (-:) :: t1 -> (t1 -> t) -> t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t @ t1 (g :: t1) (f :: t1 -> t) -> f g) -}
8eb29c8127a20373fa66e63d08dcf44d
  data Tree a b
    = Node a (AI.Tree.Tree a b) (AI.Tree.Tree a b) | Leaf b
ded0f07c340cca3ffbd7f024cf525825
  genTree ::
    (GHC.Classes.Ord t2, GHC.Classes.Ord t1, System.Random.Random t1,
     System.Random.RandomGen t) =>
    [(t2, t1)]
    -> t1
    -> t1
    -> t
    -> AI.Tree.Tree ([(t2, GHC.Types.Int)], t1) [(t2, t1)]
  {- Arity: 8,
     Strictness: <L,U(U,C(C1(U)),A,A,A,A,A,A)><L,U(1*U,A,C(C1(U)),A,A,A,A,A)><L,U(C(C1(C1(U(U,U)))),A,A,A,A,A)><L,U><S,1*U><L,U><L,U><L,U> -}
da2239fcbc16e23ade952c610ed6dfac
  sgenTree ::
    (GHC.Enum.Enum a, GHC.Classes.Ord a, System.Random.Random a,
     System.Random.RandomGen t) =>
    [(t1, [a])] -> a -> a -> t -> AI.Tree.Tree a [(t1, [a])]
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U(A,C(U),A,A,A,A,A,A)><L,U(1*U,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(C1(U(U,U)))),A,A,A,A,A)><L,U><S,1*U><L,U><L,U><L,U> -}
instance [safe] GHC.Read.Read [AI.Tree.Tree] = AI.Tree.$fReadTree
instance [safe] GHC.Show.Show [AI.Tree.Tree] = AI.Tree.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

