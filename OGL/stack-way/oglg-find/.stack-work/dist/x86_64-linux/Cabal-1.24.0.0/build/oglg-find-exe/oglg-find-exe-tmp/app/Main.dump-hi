
==================== FINAL INTERFACE ====================
2016-12-27 22:57:11.542034 UTC

interface main@main:Main 8001
  interface hash: db63a808535ef6b8d960836e8e018e9d
  ABI hash: dca4d9bf349f71d9b0bfcac50e3b6fff
  export-list hash: 91408564f9de3fedbe29e22ae7ea1f3d
  orphan hash: abea207c61b475d2981ae6588fac29a8
  flag hash: cdcdc8de26fd556963323fcafa6f260a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      parallel-3.2.1.0@parallel-3.2.1.0-6VcN0yUHtcs831TgbJiSSi
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Ratio bd7ae7e84fadf68e9483b9d3f1445f8c
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:Debug.Trace ea8cb00328fe92825c831d5e7694bf0a
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 7491ab24d955eec25fba8e0d89b657f1
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  parallel-3.2.1.0@parallel-3.2.1.0-6VcN0yUHtcs831TgbJiSSi:Control.Parallel 7447cc362cef00bd565c6cb9e1e0e6ba
import  -/  parallel-3.2.1.0@parallel-3.2.1.0-6VcN0yUHtcs831TgbJiSSi:Control.Parallel.Strategies d4cb57c7a63ecde0a4175c7100c7c26c
fixities infixl 3 -:
f3fb65e9b23c664d307f373df0994c75
  $fEqCTree :: GHC.Classes.Eq f => GHC.Classes.Eq (Main.CTree f)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ f1 ($dEq :: GHC.Classes.Eq f1).
                  @ (Main.CTree f1)
                  (Main.$fEqCTree_$c== @ f1 $dEq)
                  (Main.$fEqCTree_$c/= @ f1 $dEq) -}
f3fb65e9b23c664d307f373df0994c75
  $fEqCTree_$c/= ::
    GHC.Classes.Eq f => Main.CTree f -> Main.CTree f -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f1
                   ($dEq :: GHC.Classes.Eq f1)
                   (a :: Main.CTree f1)
                   (b :: Main.CTree f1) ->
                 case Main.$fEqCTree_$c== @ f1 $dEq a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f3fb65e9b23c664d307f373df0994c75
  $fEqCTree_$c== ::
    GHC.Classes.Eq f => Main.CTree f -> Main.CTree f -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $fEqInOGLG :: GHC.Classes.Eq a => GHC.Classes.Eq (Main.InOGLG a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Main.InOGLG a)
                  (Main.$fEqInOGLG_$c== @ a $dEq)
                  (Main.$fEqInOGLG_$c/= @ a $dEq) -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $fEqInOGLG_$c/= ::
    GHC.Classes.Eq a =>
    Main.InOGLG a -> Main.InOGLG a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Main.InOGLG a)
                   (b :: Main.InOGLG a) ->
                 case Main.$fEqInOGLG_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $fEqInOGLG_$c== ::
    GHC.Classes.Eq a =>
    Main.InOGLG a -> Main.InOGLG a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: Main.InOGLG a)
                   (ds1 :: Main.InOGLG a) ->
                 case ds of wild {
                   Main.IsInOGLG a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.IsInOGLG b1 -> GHC.Classes.== @ a $dEq a1 b1 }
                   Main.TimedOut a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.TimedOut b1 -> GHC.Classes.== @ a $dEq a1 b1 }
                   Main.IsSubSet a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.IsSubSet b1 -> GHC.Classes.== @ a $dEq a1 b1 } }) -}
f3fb65e9b23c664d307f373df0994c75
  $fShowCTree :: GHC.Show.Show f => GHC.Show.Show (Main.CTree f)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ f1 ($dShow :: GHC.Show.Show f1).
                  @ (Main.CTree f1)
                  (Main.$fShowCTree_$cshowsPrec @ f1 $dShow)
                  (Main.$fShowCTree_$cshow @ f1 $dShow)
                  (Main.$fShowCTree_$cshowList @ f1 $dShow) -}
d776c69d27a5c157e70a45586ac357ef
  $fShowCTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
f3fb65e9b23c664d307f373df0994c75
  $fShowCTree_$cshow ::
    GHC.Show.Show f => Main.CTree f -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ f1 ($dShow :: GHC.Show.Show f1) (x :: Main.CTree f1) ->
                 Main.$fShowCTree_$cshowsPrec
                   @ f1
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f3fb65e9b23c664d307f373df0994c75
  $fShowCTree_$cshowList ::
    GHC.Show.Show f => [Main.CTree f] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f1
                   ($dShow :: GHC.Show.Show f1)
                   (eta :: [Main.CTree f1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.CTree f1)
                   (Main.$fShowCTree_$cshowsPrec @ f1 $dShow Main.$fShowCTree1)
                   eta
                   eta1) -}
f3fb65e9b23c664d307f373df0994c75
  $fShowCTree_$cshowsPrec ::
    GHC.Show.Show f => GHC.Types.Int -> Main.CTree f -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ f1
                   (w :: GHC.Show.Show f1)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.CTree f1) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec @ f1 w ww1 w2 }) -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $fShowInOGLG :: GHC.Show.Show a => GHC.Show.Show (Main.InOGLG a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Main.InOGLG a)
                  (Main.$fShowInOGLG_$cshowsPrec @ a $dShow)
                  (Main.$fShowInOGLG_$cshow @ a $dShow)
                  (Main.$fShowInOGLG_$cshowList @ a $dShow) -}
86a51ee552cea63c1a1ea71e2789433e
  $fShowInOGLG2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IsSubSet "#) -}
e40e3d6eaf29cbc49f769878467b42ce
  $fShowInOGLG3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TimedOut "#) -}
97d0d842f1b86fb4d7a103a37a499bd0
  $fShowInOGLG4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IsInOGLG "#) -}
0883dd4f6686aec752832fe871976637
  $fShowInOGLG5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $fShowInOGLG_$cshow ::
    GHC.Show.Show a => Main.InOGLG a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Main.InOGLG a) ->
                 case x of wild {
                   Main.IsInOGLG b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowInOGLG4
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Main.$fShowInOGLG5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Main.TimedOut b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowInOGLG3
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Main.$fShowInOGLG5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Main.IsSubSet b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowInOGLG2
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Main.$fShowInOGLG5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $fShowInOGLG_$cshowList ::
    GHC.Show.Show a => [Main.InOGLG a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Main.InOGLG a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.InOGLG a)
                   (Main.$fShowInOGLG_$cshowsPrec @ a $dShow Main.$fShowCTree1)
                   eta
                   eta1) -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $fShowInOGLG_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Main.InOGLG a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.InOGLG a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec1 @ a w ww1 w2 }) -}
321aaa1ca30a10d0e70f0c5f93e87af1
  $s$fEq(,,) ::
    GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     Main.$s$fEq(,,)_$dEq
                     Main.$s$fEq(,,)_$dEq
                     Main.$s$fEq(,,)_$dEq)
                  Main.$s$fEq(,,)_$s$fEq(,,)_$c/= -}
fed88c00302869b9fa6608cf5be84e96
  $s$fEq(,,)_$dEq :: GHC.Classes.Eq GHC.Types.Int
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Classes.$fEqInt -}
921c08e82b243586ec4bc8bc27bf4d20
  $s$fEq(,,)_$s$fEq(,,)_$c/= ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a1 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
                   (b1 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)) ->
                 case GHC.Classes.$fEq(,,)_$c==
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        Main.$s$fEq(,,)_$dEq
                        Main.$s$fEq(,,)_$dEq
                        Main.$s$fEq(,,)_$dEq
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d6b8ddcabf2fcdf233b8d8e0d197fa7a
  $s$fEq[] ::
    GHC.Classes.Eq [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                  (GHC.Classes.$fEq[]_$c==
                     @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                     Main.$s$fEq[]_$s$fOrd(,,)_$cp1Ord)
                  Main.$s$fEq[]_$s$fEq[]_$c/= -}
5423a6d2318667659a2fef72f20b21e3
  $s$fEq[]_$s$fEq[]_$c/= ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (y :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                      Main.$s$fEq[]_$s$fOrd(,,)_$cp1Ord
                      x
                      y)) -}
b3545d800bf5fdb84b16e33ba698551a
  $s$fEq[]_$s$fOrd(,,)_$cp1Ord ::
    GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEq(,,) -}
15c8ba0e250e89234acf4c6364e2ce88
  $s$fOrd(,,) ::
    GHC.Classes.Ord (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                  Main.$s$fEq[]_$s$fOrd(,,)_$cp1Ord
                  (GHC.Classes.$fOrd(,,)_$ccompare
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,,)_$c<
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,,)_$c<=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,,)_$c>
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,,)_$c>=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  Main.$s$fOrd(,,)_$s$fOrd(,,)_$cmax
                  Main.$s$fOrd(,,)_$s$fOrd(,,)_$cmin -}
4b421aea10855bdbd53753906a12af80
  $s$fOrd(,,)_$s$fOrd(,,)_$cmax ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(U(U),U(U),U(U))><S(S(S)LL),1*U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)) ->
                 case GHC.Classes.$fOrd(,,)_$c<=
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Classes.$fOrdInt
                        GHC.Classes.$fOrdInt
                        GHC.Classes.$fOrdInt
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
0a340b5257a3cf823a8426f0dc777fd9
  $s$fOrd(,,)_$s$fOrd(,,)_$cmin ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(U(U),U(U),U(U))><S(S(S)LL),1*U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)) ->
                 case GHC.Classes.$fOrd(,,)_$c<=
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Classes.$fOrdInt
                        GHC.Classes.$fOrdInt
                        GHC.Classes.$fOrdInt
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
172a484bd70aedc9eb963dbaf5dbb298
  $s$fOrd[] ::
    GHC.Classes.Ord [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                  Main.$s$fOrd[]_$s$fOrd[]_$cp1Ord
                  (GHC.Classes.$fOrd[]_$ccompare
                     @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                     Main.$s$fOrd[]_$dOrd)
                  Main.$s$fOrd[]6
                  Main.$s$fOrd[]5
                  Main.$s$fOrd[]4
                  Main.$s$fOrd[]3
                  Main.$s$fOrd[]2
                  Main.$s$fOrd[]1 -}
7ba22412600e14cf4a6e8f82e2b60409
  $s$fOrd[]1 ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (y :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                        Main.$s$fOrd(,,)
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
42d5177d492f70c274902adc4502098e
  $s$fOrd[]2 ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (y :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                        Main.$s$fOrd(,,)
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
7cc91fac438c11d8ca415ff00218b82c
  $s$fOrd[]3 ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (y :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                        Main.$s$fOrd(,,)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
65eeff9d421801750d1aa6126d2afebe
  $s$fOrd[]4 ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (y :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                        Main.$s$fOrd(,,)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
6ab70fbe243ae883a52ce72cddd74639
  $s$fOrd[]5 ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (y :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                        Main.$s$fOrd(,,)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
6fa6830c36df5c1378ac90a2355e8f11
  $s$fOrd[]6 ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (y :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                        Main.$s$fOrd(,,)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
0171df4c6332a82c2155f01a38663c83
  $s$fOrd[]_$dOrd ::
    GHC.Classes.Ord (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fOrd(,,) -}
9e09fa7b7d485473ba20015e0e4aeb15
  $s$fOrd[]_$s$fOrd[]_$cp1Ord ::
    GHC.Classes.Eq [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEq[] -}
3eaa62a453b896df8c7866edc1780a79
  $sfromList ::
    [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [[(GHC.Types.Int, GHC.Types.Int,
                             GHC.Types.Int)]]) ->
                 case ds of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Base.Bin
                             @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                             1#
                             dt
                             (Data.Set.Base.Tip
                                @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                             (Data.Set.Base.Tip
                                @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                                  Main.$s$fOrd(,,)
                                  x
                                  ipv of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Main.$sfromList_go5
                                  (Data.Set.Base.Bin
                                     @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                                     1#
                                     dt
                                     (Data.Set.Base.Tip
                                        @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                                     (Data.Set.Base.Tip
                                        @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]))
                                  wild1 }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Main.$wgo5
                                  1#
                                  (Data.Set.Base.Bin
                                     @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                                     1#
                                     dt
                                     (Data.Set.Base.Tip
                                        @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                                     (Data.Set.Base.Tip
                                        @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]))
                                  wild1 } } } }) -}
5469ff3ff33a0fc4648b2990723b2d8f
  $sfromList_go5 ::
    Data.Set.Base.Set [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
53f78e7f7988f972a1d0ef99414c1992
  $sinsert ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)])
                   (eta1 :: Data.Set.Base.Set
                              [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                 Main.$sinsert_go5
                   @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                   Main.$s$fOrd[]
                   eta
                   eta1) -}
963d64e3d341a9cf1d8b47254dda41b4
  $sinsert_go5 ::
    GHC.Classes.Ord a1 =>
    a1 -> Data.Set.Base.Set a1 -> Data.Set.Base.Set a1
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U> -}
bc8acef48c7f93f963ca789c2284372b
  $smember_go5 ::
    [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
981a5b10b8a9c1ff51aaab7269ca9079
  $tc'Comp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7119497946534257835##
                   4944727911602206092##
                   Main.$trModule
                   Main.$tc'Comp1) -}
c3b1ed83de9d141a2d587d7caa7f895a
  $tc'Comp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Comp"#) -}
e1654eb03a67046d3aae3697c04ec24b
  $tc'EComp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13154380337973743384##
                   12513363937222388267##
                   Main.$trModule
                   Main.$tc'EComp1) -}
b6a6c7bc85d163b2e0abbce1f97b3516
  $tc'EComp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EComp"#) -}
16364b8d2e302c8c150e39777446f99d
  $tc'IsInOGLG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8363941390797351339##
                   2939351314357845367##
                   Main.$trModule
                   Main.$tc'IsInOGLG1) -}
0dd8ef7cee57b23d6426d9d174aabefe
  $tc'IsInOGLG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IsInOGLG"#) -}
dade95bf109e8717a4b578b282dd6b55
  $tc'IsSubSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7169056587013361686##
                   999852447771678683##
                   Main.$trModule
                   Main.$tc'IsSubSet1) -}
19cc70e76466dc1a5e1601d67542d8c4
  $tc'IsSubSet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IsSubSet"#) -}
89b777f3c06ea97cdb7c92bda944b958
  $tc'TimedOut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17350032805269612941##
                   14042650418996219439##
                   Main.$trModule
                   Main.$tc'TimedOut1) -}
34b145b0afa9cc80ec7eac77a1549644
  $tc'TimedOut1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimedOut"#) -}
8fcc57f0babdc146976d85b15ab75b16
  $tcCTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4086303400730403931##
                   4101849937769999118##
                   Main.$trModule
                   Main.$tcCTree1) -}
d7b848781575b940cb808ae97191b7b8
  $tcCTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CTree"#) -}
641ba1b875aa7eeecd30e906b7b9c5bd
  $tcInOGLG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6201781927617879833##
                   1800536992109564777##
                   Main.$trModule
                   Main.$tcInOGLG1) -}
33508a8316cd64580e48ee9b133e5e98
  $tcInOGLG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "InOGLG"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
f3fb65e9b23c664d307f373df0994c75
  $w$cshowsPrec ::
    GHC.Show.Show f => GHC.Prim.Int# -> Main.CTree f -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0] -}
87ec5d4cd3b9c5e33b63fce1f46adfaa
  $w$cshowsPrec1 ::
    GHC.Show.Show a => GHC.Prim.Int# -> Main.InOGLG a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Main.InOGLG a) ->
                 case w1 of wild {
                   Main.IsInOGLG b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w Main.$fShowInOGLG5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowInOGLG4 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowInOGLG4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x))) }
                   Main.TimedOut b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w Main.$fShowInOGLG5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowInOGLG3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowInOGLG3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x))) }
                   Main.IsSubSet b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w Main.$fShowInOGLG5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowInOGLG2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowInOGLG2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x))) } }) -}
c526bb0849070634365c0828bcbbc841
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.InOGLG [GHC.Types.Int]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.InOGLG [GHC.Types.Int])
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Main.IsInOGLG b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowInOGLG4
                             (GHC.Show.showList__
                                @ GHC.Types.Int
                                GHC.Show.shows_$sshows11
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowInOGLG4
                                (GHC.Show.showList__
                                   @ GHC.Types.Int
                                   GHC.Show.shows_$sshows11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1))) }
                   Main.TimedOut b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowInOGLG3
                             (GHC.Show.showList__
                                @ GHC.Types.Int
                                GHC.Show.shows_$sshows11
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowInOGLG3
                                (GHC.Show.showList__
                                   @ GHC.Types.Int
                                   GHC.Show.shows_$sshows11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1))) }
                   Main.IsSubSet b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowInOGLG2
                             (GHC.Show.showList__
                                @ GHC.Types.Int
                                GHC.Show.shows_$sshows11
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowInOGLG2
                                (GHC.Show.showList__
                                   @ GHC.Types.Int
                                   GHC.Show.shows_$sshows11
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1))) } }) -}
30b91a60c78e6b284d9a381dbcd16074
  $wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
f3fb65e9b23c664d307f373df0994c75
  data CTree f
    = EComp {func :: f}
    | Comp {func :: f,
            compF :: Main.CTree f,
            leftArg :: Main.CTree f,
            rightArg :: Main.CTree f}
e642ba62c0af79002328deb2d9245e9f
  type Func = [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
87ec5d4cd3b9c5e33b63fce1f46adfaa
  data InOGLG a = IsInOGLG a | TimedOut a | IsSubSet a
555ec8c3c17c6d0655156b6b71d8bbb1
  ag :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main26
                   Main.main8) -}
0b6bf6c234b9cf8b8b6c79b996401ba8
  allFuncs :: [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (Main.main_go Main.set) -}
c86ce78b058fff0224a7491448535f7a
  bg :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main26
                   Main.main27) -}
4b2b709e1beb6a744bfec0aa19949337
  binComp :: Main.Func -> Main.Func -> Main.Func -> Main.Func
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>,
     Unfolding: (\ (uF :: Main.Func)
                   (f1 :: Main.Func)
                   (f2 :: Main.Func) ->
                 letrec {
                   go4 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                          -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                       : y ys
                       -> case y of wild1 { (,,) a1 b1 c1 ->
                          GHC.Types.:
                            @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                            (a1, b1,
                             case c1 of wild2 { GHC.Types.I# x ->
                             case a1 of wild3 { GHC.Types.I# x1 ->
                             case b1 of wild4 { GHC.Types.I# y1 ->
                             case GHC.List.$w!!
                                    @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                                    f2
                                    (GHC.Prim.+#
                                       (GHC.Prim.*# x1 3#)
                                       y1) of wild5 { (,,) ds1 ds2 c2 ->
                             case c2 of wild6 { GHC.Types.I# y2 ->
                             case GHC.List.$w!!
                                    @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                                    uF
                                    (GHC.Prim.+# (GHC.Prim.*# x 3#) y2) of wild7 { (,,) ds3 ds4 v ->
                             v } } } } } })
                            (go4 ys) } }
                 } in
                 go4 f1) -}
554830e2a207f6c23bb25d58d65346d2
  compF :: Main.CTree f -> Main.CTree f
  RecSel Left Main.CTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ f1 (ds :: Main.CTree f1) ->
                 case ds of wild {
                   Main.EComp ipv -> Main.compF1 @ f1
                   Main.Comp ds1 ds2 ds3 ds4 -> ds2 }) -}
4b78036000c8f8b0d58bcc7166649d0b
  compF1 :: Main.CTree f
  {- Strictness: x -}
89ba2c575a7b7abccdc81f05be8d8683
  eoglgpre :: [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (Main.main_go1 Main.allFuncs) -}
2eba5a82d21eb6403a87e016b6fb022d
  func :: Main.CTree f -> f
  RecSel Left Main.CTree
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ f1 (ds :: Main.CTree f1) ->
                 case ds of wild {
                   Main.EComp ds1 -> ds1 Main.Comp ds1 ds2 ds3 ds4 -> ds1 }) -}
ea46bbd25958f549b7eac7c49c11f899
  leftArg :: Main.CTree f -> Main.CTree f
  RecSel Left Main.CTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ f1 (ds :: Main.CTree f1) ->
                 case ds of wild {
                   Main.EComp ipv -> Main.leftArg1 @ f1
                   Main.Comp ds1 ds2 ds3 ds4 -> ds3 }) -}
0c4df9a535a7327111bf0a7ca0006c91
  leftArg1 :: Main.CTree f
  {- Strictness: x -}
c57e3307a426aa1b11fb5c93f58d962f
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
24c092d19f49bc18f1c6efa7336a135e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Main.main40 Main.main2) -}
355ec6373324703eff769fd9e6d8b5cb
  main10 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main23
                   Main.main11) -}
671a84297b2b30c06bc3b66144b3671b
  main11 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main22
                   Main.main12) -}
fc78099cd200f4c971e5c758863f6f65
  main12 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main21
                   Main.main13) -}
2c958eea92815f0586f38a2eee051297
  main13 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main20
                   Main.main14) -}
421f1d6ee9614daf5c8ce48eede85f92
  main14 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main18
                   Main.main15) -}
5a78832eb69970764e63d5a7ac50346f
  main15 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main16
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))) -}
9aadd50325478baf57f2cee4cbc29883
  main16 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main17, Main.main17, Main.main17)) -}
d56c986fb05b4cbcef172f2031f209e7
  main17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
6a5cc51f473122ed6ec3a6d9bcc54844
  main18 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main17, Main.main19, Main.main17)) -}
af4be9237a4e48e857b3798a02849abd
  main19 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
38969aa6e32c9dd075c29d87622c32b7
  main2 ::
    [([(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)],
      Main.InOGLG
        [Main.CTree [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]],
      GHC.Integer.Type.Integer)]
  {- Unfolding: (Main.main_findOGLG
                   Main.allFuncs
                   Main.main4
                   Main.main3) -}
a132f8cad500913da2c4b36ea66c59c8
  main20 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main17, Main.$fShowCTree1, Main.main17)) -}
d3145c77a4225988fb78da29d61735fd
  main21 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main19, Main.main17, Main.main19)) -}
5e260a6462b7d14b31c9489b374307ab
  main22 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main19, Main.main19, Main.main19)) -}
670a08fae4b98bcf422c2f249d18af1c
  main23 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main19, Main.$fShowCTree1, Main.main19)) -}
4a9de2eac05d22eaac069b02901a1c01
  main24 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.$fShowCTree1, Main.main17, Main.$fShowCTree1)) -}
126ba90ca7868738d60e4ce1d97ca928
  main25 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.$fShowCTree1, Main.main19, Main.$fShowCTree1)) -}
16d663b37606f5e7ea854cd6dae62f5f
  main26 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.$fShowCTree1, Main.$fShowCTree1,
                  Main.$fShowCTree1)) -}
95bba12b575bd6b444d104113e7a2d81
  main27 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main39
                   Main.main28) -}
f97bfb7aa9b2dc133bd71c2004a236de
  main28 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main38
                   Main.main29) -}
51e9b3fc724430cdb9f7bd82fe7c4dbb
  main29 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main37
                   Main.main30) -}
b504006895a94005393291fcce4f62ee
  main3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
b4dd44f016c3d89f602c742cc157050f
  main30 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main22
                   Main.main31) -}
6857a9ba532d7f47fe52a3a297431f1d
  main31 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main36
                   Main.main32) -}
399cce0d6c282721f33b4aa1fa0cbb50
  main32 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main35
                   Main.main33) -}
04173fb4fff85e85ddd0e8cab9956b7d
  main33 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main34
                   Main.main15) -}
8e1faaa743c5f49b5ccf25c199816aaf
  main34 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main17, Main.main19, Main.main19)) -}
7a4a28ab5a87bdbe205c6c7c8eee40b2
  main35 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main17, Main.$fShowCTree1, Main.$fShowCTree1)) -}
01387dcffd2f5223d69743f0b5a8cd5b
  main36 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main19, Main.main17, Main.main17)) -}
2d15ef3c9fd88b772a99a53b80a53b3f
  main37 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main19, Main.$fShowCTree1, Main.$fShowCTree1)) -}
0036e82890e94350f8e3e471f7d2ee74
  main38 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.$fShowCTree1, Main.main17, Main.main17)) -}
1a210188305955978b20841c39e88389
  main39 :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.$fShowCTree1, Main.main19, Main.main19)) -}
61cb07edb9e1cabf2eea5a186eebb869
  main4 ::
    Data.Set.Base.Set [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Unfolding: (Main.$sfromList Main.main5) -}
885253c662e81d606beb047ffd515f91
  main40 ::
    [([(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)],
      Main.InOGLG
        [Main.CTree [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]],
      GHC.Integer.Type.Integer)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
a0957ded5d90b23784f30cd11bf43581
  main41 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4d4638063a3da60144cdd1c59c272076
  main5 :: [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (GHC.Base.++
                   @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                   Main.eoglgpre
                   Main.main6) -}
91d0a8c980c0eda52ead21d10957c308
  main6 :: [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (GHC.Base.map
                   @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                   @ [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                   Main.main7
                   Main.eoglgpre) -}
746ffe9537ba4f7c696955e37dbf1acf
  main7 :: Main.Func -> Main.Func
  {- Arity: 1,
     Unfolding: (\ (f1 :: Main.Func) ->
                 Main.binComp f1 Main.bg Main.ag) -}
f84c30879544068809022d331111cd69
  main8 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main25
                   Main.main9) -}
e358e4ad4d37d03058278bcc342fada7
  main9 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   Main.main24
                   Main.main10) -}
f9264ba27a8bb2d2949ddcc5e1802f6a
  main_findOGLG ::
    [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
    -> Data.Set.Base.Set
         [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Integer.Type.Integer
    -> [([(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)],
         Main.InOGLG
           [Main.CTree [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]],
         GHC.Integer.Type.Integer)]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
b5ac95e145c0ceaf76d7b0cc3735f1d9
  main_go ::
    [GHC.Types.Int]
    -> [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
  {- Arity: 1, Strictness: <S,1*U> -}
fd33a1d2ddb9a8441eeda04b40af7288
  main_go1 ::
    [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
    -> [[(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]]
  {- Arity: 1, Strictness: <S,1*U> -}
c98009d61f6a4d2575697b39e9b6f5a0
  rightArg :: Main.CTree f -> Main.CTree f
  RecSel Left Main.CTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ f1 (ds :: Main.CTree f1) ->
                 case ds of wild {
                   Main.EComp ipv -> Main.rightArg1 @ f1
                   Main.Comp ds1 ds2 ds3 ds4 -> ds4 }) -}
b466cc702270ade67fee3fda819ca38c
  rightArg1 :: Main.CTree f
  {- Strictness: x -}
f481741a7f26a0e3cfca63c41d810a6c
  set :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 2#) -}
instance GHC.Classes.Eq [Main.CTree] = Main.$fEqCTree
instance GHC.Classes.Eq [Main.InOGLG] = Main.$fEqInOGLG
instance GHC.Show.Show [Main.CTree] = Main.$fShowCTree
instance GHC.Show.Show [Main.InOGLG] = Main.$fShowInOGLG
"SPEC/Main $fEq(,,) @ Int @ Int @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                  GHC.Types.Int)
                                                       ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
                                                       ($dEq2 :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,,) @ GHC.Types.Int
                       @ GHC.Types.Int
                       @ GHC.Types.Int
                       $dEq
                       $dEq1
                       $dEq2
  = Main.$s$fEq(,,)
"SPEC/Main $fEq(,,)_$c/= @ Int @ Int @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                       GHC.Types.Int)
                                                            ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
                                                            ($dEq2 :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,,)_$c/= @ GHC.Types.Int
                            @ GHC.Types.Int
                            @ GHC.Types.Int
                            $dEq
                            $dEq1
                            $dEq2
  = Main.$s$fEq(,,)_$s$fEq(,,)_$c/=
"SPEC/Main $fEq[] @ (Int, Int, Int)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                (GHC.Types.Int, GHC.Types.Int,
                                                                 GHC.Types.Int))
  GHC.Classes.$fEq[] @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                     $dEq
  = Main.$s$fEq[]
"SPEC/Main $fEq[]_$c/= @ (Int, Int, Int)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                     (GHC.Types.Int, GHC.Types.Int,
                                                                      GHC.Types.Int))
  GHC.Classes.$fEq[]_$c/= @ (GHC.Types.Int, GHC.Types.Int,
                             GHC.Types.Int)
                          $dEq
  = Main.$s$fEq[]_$s$fEq[]_$c/=
"SPEC/Main $fOrd(,,) @ Int @ Int @ Int" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                    GHC.Types.Int)
                                                        ($dOrd1 :: GHC.Classes.Ord GHC.Types.Int)
                                                        ($dOrd2 :: GHC.Classes.Ord GHC.Types.Int)
  GHC.Classes.$fOrd(,,) @ GHC.Types.Int
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        $dOrd
                        $dOrd1
                        $dOrd2
  = Main.$s$fOrd(,,)
"SPEC/Main $fOrd(,,)_$cmax @ Int @ Int @ Int" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                          GHC.Types.Int)
                                                              ($dOrd1 :: GHC.Classes.Ord
                                                                           GHC.Types.Int)
                                                              ($dOrd2 :: GHC.Classes.Ord
                                                                           GHC.Types.Int)
  GHC.Classes.$fOrd(,,)_$cmax @ GHC.Types.Int
                              @ GHC.Types.Int
                              @ GHC.Types.Int
                              $dOrd
                              $dOrd1
                              $dOrd2
  = Main.$s$fOrd(,,)_$s$fOrd(,,)_$cmax
"SPEC/Main $fOrd(,,)_$cmin @ Int @ Int @ Int" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                          GHC.Types.Int)
                                                              ($dOrd1 :: GHC.Classes.Ord
                                                                           GHC.Types.Int)
                                                              ($dOrd2 :: GHC.Classes.Ord
                                                                           GHC.Types.Int)
  GHC.Classes.$fOrd(,,)_$cmin @ GHC.Types.Int
                              @ GHC.Types.Int
                              @ GHC.Types.Int
                              $dOrd
                              $dOrd1
                              $dOrd2
  = Main.$s$fOrd(,,)_$s$fOrd(,,)_$cmin
"SPEC/Main $fOrd(,,)_$cp1Ord @ Int @ Int @ Int" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                            GHC.Types.Int)
                                                                ($dOrd1 :: GHC.Classes.Ord
                                                                             GHC.Types.Int)
                                                                ($dOrd2 :: GHC.Classes.Ord
                                                                             GHC.Types.Int)
  GHC.Classes.$fOrd(,,)_$cp1Ord @ GHC.Types.Int
                                @ GHC.Types.Int
                                @ GHC.Types.Int
                                $dOrd
                                $dOrd1
                                $dOrd2
  = Main.$s$fEq[]_$s$fOrd(,,)_$cp1Ord
"SPEC/Main $fOrd[] @ (Int, Int, Int)" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                  (GHC.Types.Int, GHC.Types.Int,
                                                                   GHC.Types.Int))
  GHC.Classes.$fOrd[] @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                      $dOrd
  = Main.$s$fOrd[]
"SPEC/Main $fOrd[]_$cp1Ord @ (Int, Int, Int)" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                          (GHC.Types.Int,
                                                                           GHC.Types.Int,
                                                                           GHC.Types.Int))
  GHC.Classes.$fOrd[]_$cp1Ord @ (GHC.Types.Int, GHC.Types.Int,
                                 GHC.Types.Int)
                              $dOrd
  = Main.$s$fOrd[]_$s$fOrd[]_$cp1Ord
"SPEC/Main fromList @ [(Int, Int, Int)]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                     [(GHC.Types.Int, GHC.Types.Int,
                                                                       GHC.Types.Int)])
  Data.Set.Base.fromList @ [(GHC.Types.Int, GHC.Types.Int,
                             GHC.Types.Int)]
                         $dOrd
  = Main.$sfromList
"SPEC/Main insert @ [(Int, Int, Int)]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                   [(GHC.Types.Int, GHC.Types.Int,
                                                                     GHC.Types.Int)])
  Data.Set.Base.insert @ [(GHC.Types.Int, GHC.Types.Int,
                           GHC.Types.Int)]
                       $dOrd
  = Main.$sinsert
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

